import boto3
import json
import re
import logging
from datetime import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

MODEL_ID = "anthropic.claude-3-sonnet-20240229-v1:0"
REGION = "us-east-1"
S3_BUCKET = "aws-bedrock-praful"  # Replace with your S3 bucket

def clean_yaml_output(text: str) -> str:
    cleaned = re.sub(r"^(```\w*\n)?(yaml|json)?\n?", "", text, flags=re.IGNORECASE)
    cleaned = re.sub(r"```", "", cleaned).strip()
    return cleaned

def slugify(text: str) -> str:
    return re.sub(r"[^\w-]", "-", text.lower())[:40]

def generate_cfn_template(prompt_text: str) -> str:
    client = boto3.client("bedrock-runtime", region_name=REGION)

    prompt = (
        "You are a DevOps expert.\n\n"
        "Generate a valid AWS CloudFormation YAML template that fulfills the following user request:\n"
        f"{prompt_text}\n\n"
        "- Include all required parameters like KeyName.\n"
        "- Include a security group if EC2 or networking is involved.\n"
        "- Output ONLY the valid raw YAML. No markdown, no explanation."
    )

    body = {
        "anthropic_version": "bedrock-2023-05-31",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1024,
        "temperature": 0.2
    }

    response = client.invoke_model(
        modelId=MODEL_ID,
        body=json.dumps(body),
        contentType="application/json",
        accept="application/json"
    )

    response_data = json.loads(response["body"].read())
    output = response_data.get("content", "")

    if isinstance(output, list):
        output = "".join([part.get("text", "") if isinstance(part, dict) else str(part) for part in output])

    if not isinstance(output, str) or not output.strip():
        raise Exception("Empty template generated by model")

    output = output.strip()
    return clean_yaml_output(output)

def save_to_s3(key: str, content: str):
    s3 = boto3.client("s3", region_name=REGION)
    s3.put_object(Bucket=S3_BUCKET, Key=key, Body=content)
    logger.info(f"Template saved to s3://{S3_BUCKET}/{key}")

def validate_template(template_body: str):
    cfn = boto3.client("cloudformation", region_name=REGION)
    cfn.validate_template(TemplateBody=template_body)
    logger.info("CloudFormation template is valid")

def deploy_stack(stack_name: str, template_body: str, parameters: dict):
    cfn = boto3.client("cloudformation", region_name=REGION)
    param_list = [
        {"ParameterKey": k, "ParameterValue": v}
        for k, v in parameters.items()
    ]

    try:
        cfn.create_stack(
            StackName=stack_name,
            TemplateBody=template_body,
            Parameters=param_list,
            Capabilities=["CAPABILITY_NAMED_IAM"]
        )
        logger.info(f"Stack {stack_name} created successfully.")
    except cfn.exceptions.AlreadyExistsException:
        logger.info(f"Stack {stack_name} exists. Updating...")
        cfn.update_stack(
            StackName=stack_name,
            TemplateBody=template_body,
            Parameters=param_list,
            Capabilities=["CAPABILITY_NAMED_IAM"]
        )

def lambda_handler(event, context):
    try:
        logger.info(f"Received event: {json.dumps(event)}")

        body = json.loads(event.get("body", "{}"))
        prompt_text = body.get("cfn_request", "")
        parameters = body.get("parameters", {})

        if not prompt_text:
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "Missing 'cfn_request' in request body"})
            }

        yaml_template = generate_cfn_template(prompt_text)

        slug = slugify(prompt_text)
        timestamp = datetime.utcnow().strftime("%Y%m%d%H%M%S")
        s3_key = f"cloudformation/{slug}-{timestamp}.yaml"
        stack_name = f"{slug}-{timestamp}"

        save_to_s3(s3_key, yaml_template)
        validate_template(yaml_template)
        deploy_stack(stack_name, yaml_template, parameters)

        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "Template generated and deployed successfully",
                "stack_name": stack_name,
                "s3_key": s3_key,
                "preview": yaml_template[:300]
            })
        }

    except Exception as e:
        logger.error("Error in Lambda handler", exc_info=True)
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
